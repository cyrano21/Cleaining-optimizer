#!/usr/bin/env node

/**
 * ðŸš€ RÃ‰SOLUTION DES PROBLÃˆMES DE DÃ‰PLOIEMENT VERCEL
 * Ce script applique plusieurs solutions pour rÃ©soudre les erreurs de dÃ©ploiement
 */

const fs = require('fs');
const path = require('path');

console.log('ðŸ”§ RÃ‰SOLUTION DES PROBLÃˆMES DE DÃ‰PLOIEMENT VERCEL');
console.log('=' .repeat(60));

// 1. VÃ©rifier et crÃ©er .npmrc pour utiliser un miroir fiable
const npmrcContent = `
registry=https://registry.npmjs.org/
# Augmenter les timeouts
timeout=60000
fetch-timeout=60000
fetch-retry-mintimeout=10000
fetch-retry-maxtimeout=60000
fetch-retry-factor=2
fetch-retries=5
`;

fs.writeFileSync('.npmrc', npmrcContent.trim());
console.log('âœ… Fichier .npmrc crÃ©Ã© avec configuration robuste');

// 2. Mettre Ã  jour .yarnrc.yml avec configuration plus robuste
const yarnrcContent = `
nodeLinker: node-modules
yarnPath: .yarn/releases/yarn-1.22.22.cjs
networkTimeout: 300000
httpTimeout: 60000
networkConcurrency: 8
`;

fs.writeFileSync('.yarnrc.yml', yarnrcContent.trim());
console.log('âœ… Fichier .yarnrc.yml mis Ã  jour');

// 3. CrÃ©er un script de build alternatif sans problematic packages
const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));

// Sauvegarder les dÃ©pendances actuelles
const originalDeps = { ...packageJson.dependencies };

// Ajouter alternatives pour les packages problÃ©matiques
if (packageJson.dependencies['@floating-ui/react-dom']) {
    packageJson.dependencies['@floating-ui/react-dom'] = '^2.0.0';
}

// Ajouter scripts de build alternatifs
packageJson.scripts = {
    ...packageJson.scripts,
    'build:safe': 'npm ci --production=false && npm run build',
    'build:yarn': 'yarn install --frozen-lockfile && yarn build',
    'build:npm': 'npm ci && npm run build',
    'vercel-build': 'npm ci --production=false --ignore-scripts && npm run build',
    'postinstall': 'echo "Installation terminÃ©e"'
};

// Ajouter engines pour forcer Node.js version
packageJson.engines = {
    node: '>=18.0.0',
    npm: '>=8.0.0'
};

fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
console.log('âœ… package.json mis Ã  jour avec scripts alternatifs');

// 4. CrÃ©er vercel.json optimisÃ©
const vercelConfig = {
    "version": 2,
    "builds": [
        {
            "src": "package.json",
            "use": "@vercel/node",
            "config": {
                "maxLambdaSize": "50mb"
            }
        }
    ],
    "buildCommand": "npm ci --production=false && npm run build",
    "installCommand": "npm ci --production=false",
    "framework": "nextjs",
    "functions": {
        "src/app/api/**/*.js": {
            "runtime": "nodejs18.x"
        }
    },
    "env": {
        "NODE_VERSION": "18"
    },
    "regions": ["fra1"]
};

fs.writeFileSync('vercel.json', JSON.stringify(vercelConfig, null, 2));
console.log('âœ… vercel.json optimisÃ© crÃ©Ã©');

// 5. CrÃ©er script de dÃ©ploiement robuste
const deployScript = `#!/bin/bash

echo "ðŸš€ DÃ‰PLOIEMENT VERCEL ROBUSTE"
echo "=============================="

# Nettoyer les caches
echo "ðŸ§¹ Nettoyage des caches..."
rm -rf node_modules package-lock.json yarn.lock .next .vercel

# Installer avec NPM (plus stable pour Vercel)
echo "ðŸ“¦ Installation des dÃ©pendances avec NPM..."
npm install --production=false

# Build local pour vÃ©rifier
echo "ðŸ”¨ Build local..."
npm run build

# DÃ©ployer
echo "ðŸš€ DÃ©ploiement sur Vercel..."
npx vercel --prod

echo "âœ… DÃ©ploiement terminÃ© !"
`;

fs.writeFileSync('deploy-robust.sh', deployScript);
fs.chmodSync('deploy-robust.sh', '755');
console.log('âœ… Script de dÃ©ploiement robuste crÃ©Ã©');

// 6. CrÃ©er un backup de package-lock si nÃ©cessaire
if (fs.existsSync('package-lock.json')) {
    fs.copyFileSync('package-lock.json', 'package-lock.json.backup');
    console.log('âœ… Backup de package-lock.json crÃ©Ã©');
}

console.log('\nðŸŽ¯ SOLUTIONS APPLIQUÃ‰ES:');
console.log('1. âœ… Configuration .npmrc robuste');
console.log('2. âœ… Configuration .yarnrc.yml optimisÃ©e');
console.log('3. âœ… Scripts de build alternatifs');
console.log('4. âœ… Configuration Vercel optimisÃ©e');
console.log('5. âœ… Script de dÃ©ploiement robuste');

console.log('\nðŸš€ PROCHAINES Ã‰TAPES:');
console.log('1. ExÃ©cuter: npm install');
console.log('2. Tester: npm run build');
console.log('3. DÃ©ployer: ./deploy-robust.sh');
console.log('4. Ou utiliser: npx vercel --prod');

console.log('\nðŸ’¡ ALTERNATIVES EN CAS D\'Ã‰CHEC:');
console.log('- Utiliser npm au lieu de yarn');
console.log('- DÃ©ployer depuis un environnement diffÃ©rent');
console.log('- Utiliser GitHub Actions pour le dÃ©ploiement');
