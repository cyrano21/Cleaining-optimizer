import { NextRequest, NextResponse } from "next/server";
import { connectDB } from "@/lib/mongodb";
import User from "@/models/User";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

export async function POST(request: NextRequest) {
  try {
    console.log("üì§ API Signin - D√©but de la requ√™te");
    
    try {
      await connectDB();
      console.log("üì§ API Signin - Connexion √† la base de donn√©es r√©ussie");
    } catch (dbError) {
      console.error("‚ùå API Signin - Erreur de connexion √† la base de donn√©es:", dbError);
      return NextResponse.json(
        { 
          success: false, 
          message: "Erreur de connexion √† la base de donn√©es"
        },
        { 
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }
    
    let body;
    try {
      body = await request.json();
    } catch (error) {
      console.error("‚ùå Erreur lors du parsing du corps de la requ√™te:", error);
      return NextResponse.json(
        { 
          success: false, 
          message: "Format de requ√™te invalide" 
        },
        { 
          status: 400,
          headers: { 'Content-Type': 'application/json' } 
        }
      );
    }
    
    const { email, password } = body;
    console.log("üì§ API Signin - Tentative de connexion pour email:", email);

    if (!email || !password) {
      console.log("‚ùå API Signin - Email ou mot de passe manquant");
      return NextResponse.json(
        { 
          success: false, 
          message: "Email et mot de passe requis" 
        },
        { 
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    // Rechercher l'utilisateur par email
    console.log("üì§ API Signin - Recherche de l'utilisateur dans la BDD");
    const user = await User.findOne({ email }).select('+password');
    
    if (!user) {
      console.log("‚ùå API Signin - Utilisateur non trouv√©:", email);
      return NextResponse.json(
        { 
          success: false, 
          message: "Identifiants incorrects" // Message g√©n√©rique pour √©viter l'√©num√©ration des utilisateurs
        },
        { 
          status: 401,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }
    
    // V√©rifier si l'utilisateur est actif
    if (!user.isActive) {
      console.log("‚ùå API Signin - Compte utilisateur d√©sactiv√©:", email);
      return NextResponse.json(
        { 
          success: false, 
          message: "Ce compte a √©t√© d√©sactiv√©" 
        },
        { 
          status: 401,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }
    
    console.log("‚úÖ API Signin - Utilisateur trouv√©:", user.email);

    // V√©rifier le mot de passe
    console.log("üì§ API Signin - V√©rification du mot de passe");
    let isPasswordValid = false;
    
    try {
      isPasswordValid = await bcrypt.compare(password, user.password);
    } catch (error) {
      console.error("‚ùå API Signin - Erreur lors de la comparaison du mot de passe:", error);
    }
    
    if (!isPasswordValid) {
      console.log("‚ùå API Signin - Mot de passe invalide pour:", email);
      
      // Incr√©menter les tentatives de connexion √©chou√©es (si la m√©thode existe)
      if (typeof user.incLoginAttempts === 'function') {
        try {
          await user.incLoginAttempts();
        } catch (error) {
          console.error("‚ùå API Signin - Erreur lors de l'incr√©mentation des tentatives:", error);
        }
      }
      
      return NextResponse.json(
        { 
          success: false, 
          message: "Identifiants incorrects" // Message g√©n√©rique pour la s√©curit√©
        },
        { 
          status: 401,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }
    
    // V√©rifier si le compte est verrouill√©
    if (user.isAccountLocked && typeof user.isAccountLocked === 'function' && user.isAccountLocked()) {
      console.log("‚ùå API Signin - Compte verrouill√© pour:", email);
      return NextResponse.json(
        { 
          success: false, 
          message: "Ce compte est temporairement verrouill√©. Veuillez r√©essayer plus tard." 
        },
        { 
          status: 403,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }
    
    console.log("‚úÖ API Signin - Authentification r√©ussie pour:", email);

    // Cr√©er un token JWT
    const token = jwt.sign(
      { 
        userId: user._id, 
        email: user.email, 
        role: user.role 
      },
      (() => {
        const jwtSecret = process.env.JWT_SECRET;
        if (!jwtSecret) {
          throw new Error('JWT_SECRET non configur√© dans .env');
        }
        return jwtSecret;
      })(),
      { expiresIn: "24h" }
    );

    return NextResponse.json({
      success: true,
      message: "Connexion r√©ussie",
      user: {
        id: user._id.toString(), // Correction ici : toujours une string
        email: user.email,
        name: user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.firstName || user.lastName || user.email.split('@')[0],
        role: user.role,
        storeId: user.storeId
      },
      accessToken: token
    }, {
      headers: { 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error("‚ùå API Signin - Erreur lors de la connexion:", error);
    return NextResponse.json(
      { 
        success: false, 
        message: "Erreur serveur" 
      },
      { 
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
}
