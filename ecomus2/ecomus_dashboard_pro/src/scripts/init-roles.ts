/**
 * Script d'initialisation des r√¥les syst√®me
 * Ce script cr√©e les r√¥les par d√©faut n√©cessaires au fonctionnement de l'application
 */

import connectDB from '../lib/mongodb';
import Role from '../models/Role';
import User from '../models/User';

// Configuration des r√¥les syst√®me
const systemRoles = [
  {
    name: 'admin',
    description: 'Administrateur syst√®me avec acc√®s complet √† toutes les fonctionnalit√©s',
    permissions: [
      'read', 'write', 'delete',
      'manage_users', 'manage_roles', 'manage_products', 
      'manage_orders', 'manage_stores', 'view_analytics',
      'manage_settings', 'manage_categories'
    ],
    isActive: true,
    isSystem: true
  },
  {
    name: 'vendor',
    description: 'Vendeur g√©rant sa propre boutique et ses produits',
    permissions: [
      'read', 'write',
      'manage_products', 'manage_orders', 'view_analytics',
      'manage_categories'
    ],
    isActive: true,
    isSystem: true
  },
  {
    name: 'customer',
    description: 'Client avec acc√®s aux fonctionnalit√©s d\'achat et de profil',
    permissions: [
      'read'
    ],
    isActive: true,
    isSystem: true
  }
];

async function initializeSystemRoles() {
  try {
    console.log('üöÄ Initialisation des r√¥les syst√®me...');
    
    // Connexion √† la base de donn√©es
    await connectDB();
    console.log('‚úÖ Connexion √† MongoDB √©tablie');

    // V√©rifier et cr√©er les r√¥les syst√®me
    for (const roleData of systemRoles) {
      try {
        // V√©rifier si le r√¥le existe d√©j√†
        const existingRole = await Role.findOne({ name: roleData.name });
        
        if (existingRole) {
          console.log(`‚ö†Ô∏è  Le r√¥le "${roleData.name}" existe d√©j√†`);
          
          // Mettre √† jour les permissions si n√©cessaire
          const needsUpdate = JSON.stringify(existingRole.permissions.sort()) !== 
                             JSON.stringify(roleData.permissions.sort());
          
          if (needsUpdate) {
            existingRole.permissions = roleData.permissions;
            existingRole.description = roleData.description;
            await existingRole.save();
            console.log(`üîÑ Permissions mises √† jour pour le r√¥le "${roleData.name}"`);
          }
        } else {
          // Cr√©er le nouveau r√¥le
          const newRole = new Role(roleData);
          await newRole.save();
          console.log(`‚úÖ R√¥le "${roleData.name}" cr√©√© avec succ√®s`);
        }      } catch (error: any) {
        console.error(`‚ùå Erreur lors de la cr√©ation du r√¥le "${roleData.name}":`, error.message || error);
      }
    }

    console.log('\nüìä R√©sum√© des r√¥les syst√®me :');
    const allRoles = await Role.find({ isSystem: true });
    allRoles.forEach(role => {
      console.log(`   - ${role.name}: ${role.permissions.length} permissions`);
    });

    console.log('\nüéâ Initialisation des r√¥les termin√©e avec succ√®s !');
      } catch (error: any) {
    console.error('‚ùå Erreur lors de l\'initialisation des r√¥les syst√®me:', error.message || error);
    process.exit(1);
  }
}

async function createDefaultAdminUser() {
  try {
    console.log('\nüë§ V√©rification de l\'utilisateur administrateur par d√©faut...');
    
    // V√©rifier si un admin existe d√©j√†
    const existingAdmin = await User.findOne({ role: 'admin' });
    
    if (existingAdmin) {
      console.log('‚ö†Ô∏è  Un administrateur existe d√©j√†');
      return;
    }

    // R√©cup√©rer le r√¥le admin
    const adminRole = await Role.findOne({ name: 'admin' });
    if (!adminRole) {
      console.log('‚ùå R√¥le admin non trouv√©. Veuillez d\'abord initialiser les r√¥les.');
      return;
    }

    // Cr√©er l'utilisateur admin par d√©faut
    const defaultAdmin = new User({
      firstName: 'Super',
      lastName: 'Admin',
      email: 'admin@ecomus.com',
      password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj8gv/6oqKxa', // password: admin123
      role: 'admin',
      isActive: true,
      isVerified: true,
      profile: {
        bio: 'Administrateur syst√®me par d√©faut',
        avatar: '/images/avatar.webp'
      }
    });

    await defaultAdmin.save();
    console.log('‚úÖ Utilisateur administrateur par d√©faut cr√©√©');
    console.log('   Email: admin@ecomus.com');
    console.log('   Mot de passe: admin123');
    console.log('   ‚ö†Ô∏è  Veuillez changer ce mot de passe lors de la premi√®re connexion !');
      } catch (error: any) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'admin par d√©faut:', error.message || error);
  }
}

async function main() {
  try {
    await initializeSystemRoles();
    await createDefaultAdminUser();
    
    console.log('\nüèÅ Script d\'initialisation termin√© !');
    process.exit(0);
      } catch (error: any) {
    console.error('‚ùå Erreur fatale:', error.message || error);
    process.exit(1);
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  main();
}

export { initializeSystemRoles, createDefaultAdminUser };
