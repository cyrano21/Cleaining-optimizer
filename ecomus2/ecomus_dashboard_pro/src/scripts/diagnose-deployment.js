#!/usr/bin/env node

/**
 * Script de diagnostic pour les probl√®mes de d√©ploiement
 */

const { execSync } = require('child_process');
const fs = require('fs');

console.log('üîç DIAGNOSTIC DES PROBL√àMES DE D√âPLOIEMENT\n');

// V√©rifier les fichiers de configuration
const configFiles = [
  'package.json',
  'yarn.lock',
  'vercel.json',
  '.yarnrc.yml',
  'next.config.js'
];

console.log('üìÅ FICHIERS DE CONFIGURATION:');
configFiles.forEach(file => {
  const exists = fs.existsSync(file);
  console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
});

console.log('\nüì¶ INFORMATIONS YARN:');
try {
  const yarnVersion = execSync('yarn --version', { encoding: 'utf8' }).trim();
  console.log(`   Version Yarn: ${yarnVersion}`);
} catch (error) {
  console.log('   ‚ùå Yarn non disponible');
}

console.log('\nüì¶ INFORMATIONS NPM:');
try {
  const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
  console.log(`   Version NPM: ${npmVersion}`);
} catch (error) {
  console.log('   ‚ùå NPM non disponible');
}

console.log('\nüîß SOLUTIONS APPLIQU√âES:');
console.log('   ‚úÖ Configuration .yarnrc.yml ajout√©e');
console.log('   ‚úÖ R√©solutions de paquets dans package.json');
console.log('   ‚úÖ Scripts de build alternatifs');
console.log('   ‚úÖ Configuration Vercel optimis√©e');

console.log('\nüöÄ COMMANDES ALTERNATIVES:');
console.log('   yarn build:vercel     - Build avec timeout √©tendu');
console.log('   yarn build:alternative - Build avec npm fallback');
console.log('   yarn reinstall        - R√©installation compl√®te');
console.log('   yarn clean            - Nettoyage complet');

console.log('\nüí° RECOMMANDATIONS:');
console.log('   1. Red√©ployer apr√®s les modifications');
console.log('   2. V√©rifier les variables d\'environnement');
console.log('   3. Utiliser Node.js 18.x pour la compatibilit√©');
console.log('   4. Si le probl√®me persiste, attendre que npm registry se stabilise');

console.log('\n‚úÖ Diagnostic termin√© !');
