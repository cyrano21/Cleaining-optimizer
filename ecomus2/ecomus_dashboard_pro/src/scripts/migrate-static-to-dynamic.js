/**
 * Script de migration des donn√©es statiques vers la base de donn√©es
 * Transf√®re les templates et pages du fichier template-subscriptions.js vers MongoDB
 */

const mongoose = require('mongoose');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '..', '.env.local') });

// Donn√©es statiques √† migrer
const STATIC_TEMPLATES = {
  free: [
    {
      id: 'home-02',
      name: 'Home Fashion Basic',
      description: 'Template basique pour boutique de mode',
      category: 'fashion',
      preview: '/templates/previews/home-02.jpg',
      features: ['Header simple', 'Section produits', 'Footer basique']
    },
    {
      id: 'home-03',
      name: 'Home General',
      description: 'Template g√©n√©raliste polyvalent',
      category: 'generic',
      preview: '/templates/previews/home-03.jpg',
      features: ['Design √©pur√©', 'Compatible mobile', 'SEO optimis√©']
    }
  ],
  basic: [
    {
      id: 'home-accessories',
      name: 'Home Accessoires',
      description: 'Sp√©cialis√© pour accessoires de mode',
      category: 'accessories',
      preview: '/templates/previews/home-accessories.jpg',
      features: ['Grille produits', 'Filtres avanc√©s', 'Zoom produit']
    },
    {
      id: 'home-footwear',
      name: 'Home Chaussures',
      description: 'Optimis√© pour chaussures et sneakers',
      category: 'footwear',
      preview: '/templates/previews/home-footwear.jpg',
      features: ['Guide des tailles', 'Vue 360¬∞', 'Comparaison mod√®les']
    },
    {
      id: 'home-handbag',
      name: 'Home Maroquinerie',
      description: 'D√©di√© aux sacs et maroquinerie',
      category: 'bags',
      preview: '/templates/previews/home-handbag.jpg',
      features: ['Galerie premium', 'Mat√©riaux d√©taill√©s', 'Personnalisation']
    },
    {
      id: 'home-jewerly',
      name: 'Home Bijouterie',
      description: '√âl√©gant pour bijoux et montres',
      category: 'jewelry',
      preview: '/templates/previews/home-jewerly.jpg',
      features: ['Fond √©l√©gant', 'Zoom haute qualit√©', 'Certificats']
    }
  ],
  premium: [
    {
      id: 'home-cosmetic',
      name: 'Home Cosm√©tiques',
      description: 'Premium pour cosm√©tiques et beaut√©',
      category: 'beauty',
      preview: '/templates/previews/home-cosmetic.jpg',
      features: ['Testeur virtuel', 'Ingr√©dients d√©taill√©s', 'Tutoriels vid√©o']
    },
    {
      id: 'home-skincare',
      name: 'Home Soins de la peau',
      description: 'Sp√©cialis√© soins et bien-√™tre',
      category: 'skincare',
      preview: '/templates/previews/home-skincare.jpg',
      features: ['Diagnostic peau', 'Routine personnalis√©e', 'Conseils experts']
    },
    {
      id: 'home-electronic',
      name: 'Home √âlectronique',
      description: 'High-tech et √©lectronique',
      category: 'tech',
      preview: '/templates/previews/home-electronic.jpg',
      features: ['Comparateur technique', 'AR preview', 'Support technique']
    },
    {
      id: 'home-furniture',
      name: 'Home Mobilier',
      description: 'Mobilier et d√©coration haut de gamme',
      category: 'furniture',
      preview: '/templates/previews/home-furniture.jpg',
      features: ['Configurateur 3D', 'Plan de pi√®ce', 'Livraison premium']
    }
  ],
  enterprise: [
    {
      id: 'home-multi-brand',
      name: 'Home Multi-marques',
      description: 'Marketplace multi-vendeurs',
      category: 'marketplace',
      preview: '/templates/previews/home-multi-brand.jpg',
      features: ['Gestion multi-vendeurs', 'Dashboard avanc√©', 'Commission syst√®me']
    },
    {
      id: 'home-baby',
      name: 'Home B√©b√© Premium',
      description: 'Sp√©cialis√© pu√©riculture premium',
      category: 'baby',
      preview: '/templates/previews/home-baby.jpg',
      features: ['Guide √¢ge', 'S√©curit√© certifi√©e', 'Suivi d√©veloppement']
    },
    {
      id: 'home-personalized-pod',
      name: 'Home Personnalis√© POD',
      description: 'Print-on-demand personnalis√©',
      category: 'pod',
      preview: '/templates/previews/home-personalized-pod.jpg',
      features: ['Designer int√©gr√©', 'Preview temps r√©el', 'Production automatique']
    }
  ]
};

const STATIC_PAGES = {
  free: [
    {
      id: 'about-us',
      name: '√Ä propos',
      description: 'Page pr√©sentation simple',
      category: 'info'
    },
    {
      id: 'contact-1',
      name: 'Contact basique',
      description: 'Formulaire de contact simple',
      category: 'contact'
    }
  ],
  basic: [
    {
      id: 'contact-2',
      name: 'Contact avanc√©',
      description: 'Contact avec carte et horaires',
      category: 'contact'
    },
    {
      id: 'faq-1',
      name: 'FAQ Simple',
      description: 'Questions fr√©quentes basiques',
      category: 'support'
    },
    {
      id: 'our-store',
      name: 'Notre boutique',
      description: 'Pr√©sentation magasin physique',
      category: 'info'
    }
  ],
  premium: [
    {
      id: 'faq-2',
      name: 'FAQ Avanc√©e',
      description: 'FAQ avec recherche et cat√©gories',
      category: 'support'
    },
    {
      id: 'store-locations',
      name: 'Nos magasins',
      description: 'Localisateur de magasins',
      category: 'locations'
    },
    {
      id: 'brands',
      name: 'Nos marques',
      description: 'Pr√©sentation des marques partenaires',
      category: 'brands'
    },
    {
      id: 'timeline',
      name: 'Notre histoire',
      description: 'Timeline de l\'entreprise',
      category: 'info'
    }
  ],
  enterprise: [
    {
      id: 'brands-v2',
      name: 'Marques Premium',
      description: 'Pr√©sentation marques avec analytics',
      category: 'brands'
    },
    {
      id: 'invoice',
      name: 'Factures',
      description: 'Syst√®me de facturation avanc√©',
      category: 'business'
    }
  ]
};

// Sch√©mas Mongoose
const TemplateSubscriptionSchema = new mongoose.Schema({
  templateId: { type: String, required: true, unique: true },
  name: { type: String, required: true },
  description: { type: String, required: true },
  category: { type: String, required: true },
  previewUrl: String,
  features: [{
    name: { type: String, required: true },
    description: String
  }],
  subscriptionTier: {
    type: String,
    required: true,
    enum: ['free', 'basic', 'premium', 'enterprise']
  },
  isActive: { type: Boolean, default: true },
  sortOrder: { type: Number, default: 0 }
}, { timestamps: true });

const PageSubscriptionSchema = new mongoose.Schema({
  pageId: { type: String, required: true, unique: true },
  name: { type: String, required: true },
  description: { type: String, required: true },
  category: { type: String, required: true },
  subscriptionTier: {
    type: String,
    required: true,
    enum: ['free', 'basic', 'premium', 'enterprise']
  },
  isActive: { type: Boolean, default: true },
  sortOrder: { type: Number, default: 0 }
}, { timestamps: true });

const TemplateSubscription = mongoose.model('TemplateSubscription', TemplateSubscriptionSchema);
const PageSubscription = mongoose.model('PageSubscription', PageSubscriptionSchema);

async function migrateTemplates() {
  console.log('üîÑ Migration des templates...');
  
  let totalTemplates = 0;
  let sortOrder = 0;
  
  for (const [tier, templates] of Object.entries(STATIC_TEMPLATES)) {
    console.log(`üìÅ Migration des templates ${tier}...`);
    
    for (const template of templates) {
      try {
        // V√©rifier si le template existe d√©j√†
        const existing = await TemplateSubscription.findOne({ templateId: template.id });
        if (existing) {
          console.log(`‚ö†Ô∏è  Template ${template.id} existe d√©j√†, ignor√©`);
          continue;
        }
        
        // Convertir les features en format attendu
        const features = template.features.map(feature => ({
          name: feature,
          description: ''
        }));
        
        const newTemplate = new TemplateSubscription({
          templateId: template.id,
          name: template.name,
          description: template.description,
          category: template.category,
          previewUrl: template.preview,
          features,
          subscriptionTier: tier,
          sortOrder: sortOrder++,
          isActive: true
        });
        
        await newTemplate.save();
        totalTemplates++;
        console.log(`‚úÖ Template ${template.id} migr√©`);
        
      } catch (error) {
        console.error(`‚ùå Erreur lors de la migration du template ${template.id}:`, error.message);
      }
    }
  }
  
  console.log(`‚ú® ${totalTemplates} templates migr√©s avec succ√®s`);
}

async function migratePages() {
  console.log('üîÑ Migration des pages...');
  
  let totalPages = 0;
  let sortOrder = 0;
  
  for (const [tier, pages] of Object.entries(STATIC_PAGES)) {
    console.log(`üìÅ Migration des pages ${tier}...`);
    
    for (const page of pages) {
      try {
        // V√©rifier si la page existe d√©j√†
        const existing = await PageSubscription.findOne({ pageId: page.id });
        if (existing) {
          console.log(`‚ö†Ô∏è  Page ${page.id} existe d√©j√†, ignor√©e`);
          continue;
        }
        
        const newPage = new PageSubscription({
          pageId: page.id,
          name: page.name,
          description: page.description,
          category: page.category,
          subscriptionTier: tier,
          sortOrder: sortOrder++,
          isActive: true
        });
        
        await newPage.save();
        totalPages++;
        console.log(`‚úÖ Page ${page.id} migr√©e`);
        
      } catch (error) {
        console.error(`‚ùå Erreur lors de la migration de la page ${page.id}:`, error.message);
      }
    }
  }
  
  console.log(`‚ú® ${totalPages} pages migr√©es avec succ√®s`);
}

async function main() {
  try {
    console.log('üöÄ D√©but de la migration des donn√©es statiques vers MongoDB');
    
    // Connexion √† MongoDB
    const mongoUri = process.env.MONGODB_URI;
    if (!mongoUri) {
      throw new Error('MONGODB_URI non d√©fini dans les variables d\'environnement');
    }
    
    await mongoose.connect(mongoUri);
    console.log('‚úÖ Connexion √† MongoDB √©tablie');
    
    // Migration des templates
    await migrateTemplates();
    
    // Migration des pages
    await migratePages();
    
    console.log('üéâ Migration termin√©e avec succ√®s!');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Connexion MongoDB ferm√©e');
  }
}

// Ex√©cution du script
if (require.main === module) {
  main();
}

module.exports = { main };