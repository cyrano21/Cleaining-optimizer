/**
 * Script pour compl√©ter les donn√©es de profil utilisateur
 * Version corrig√©e pour finaliser le syst√®me d'authentification
 */

const mongoose = require('mongoose');

// Configuration MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/ecomus';

// Donn√©es compl√®tes pour l'utilisateur louiscyrano@gmail.com
const completeProfileData = {
  name: 'Louis Olivier Nkeng Hiag',
  firstName: 'Louis',
  lastName: 'Olivier Nkeng Hiag',
  profile: {
    firstName: 'Louis',
    lastName: 'Olivier Nkeng Hiag',
    avatar: '/images/admin-avatar.jpg',
    bio: 'Super Administrateur du syst√®me Ecomus Dashboard',
    phone: '+33123456789',
    department: 'Administration',
    position: 'Super Administrateur',
    dateOfBirth: new Date('1990-01-01'),
    gender: 'male'
  },
  address: {
    street: '123 Avenue des Champs-√âlys√©es',
    city: 'Paris',
    state: '√éle-de-France',
    postalCode: '75001',
    country: 'France'
  },
  preferences: {
    notifications: true,
    newsletter: true,
    language: 'fr',
    timezone: 'Europe/Paris',
    currency: 'EUR'
  }
};

async function completeUserProfile() {
  try {
    console.log('üîó Connexion √† MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connexion MongoDB √©tablie');

    // Utiliser la collection users directement
    const db = mongoose.connection.db;
    const usersCollection = db.collection('users');
    
    console.log('üîç Recherche de l\'utilisateur louiscyrano@gmail.com...');
    
    // V√©rifier si l'utilisateur existe
    const existingUser = await usersCollection.findOne({ 
      email: 'louiscyrano@gmail.com' 
    });
    
    if (!existingUser) {
      console.log('‚ùå Utilisateur non trouv√©');
      return;
    }
    
    console.log('‚úÖ Utilisateur trouv√©, mise √† jour du profil...');
    
    // Mettre √† jour avec les donn√©es compl√®tes
    const updateResult = await usersCollection.updateOne(
      { email: 'louiscyrano@gmail.com' },
      {
        $set: {
          ...completeProfileData,
          updatedAt: new Date(),
          lastProfileUpdate: new Date()
        }
      }
    );
    
    console.log(`‚úÖ Profil mis √† jour: ${updateResult.modifiedCount} document(s) modifi√©(s)`);
    
    // V√©rifier la mise √† jour
    const updatedUser = await usersCollection.findOne(
      { email: 'louiscyrano@gmail.com' },
      { projection: { password: 0 } }
    );
    
    console.log('\nüìã PROFIL UTILISATEUR COMPL√âT√â:');
    console.log('================================');
    console.log('üìß Email:', updatedUser.email);
    console.log('üë§ Nom complet:', updatedUser.name);
    console.log('üë§ Pr√©nom:', updatedUser.firstName);
    console.log('üë§ Nom de famille:', updatedUser.lastName);
    console.log('üîß R√¥le:', updatedUser.role);
    console.log('üì± T√©l√©phone:', updatedUser.profile?.phone);
    console.log('üè¢ D√©partement:', updatedUser.profile?.department);
    console.log('üíº Poste:', updatedUser.profile?.position);
    console.log('üåç Pays:', updatedUser.address?.country);
    console.log('üåê Langue:', updatedUser.preferences?.language);
    console.log('üí∞ Devise:', updatedUser.preferences?.currency);
    console.log('‚úÖ Actif:', updatedUser.isActive);
    
    console.log('\nüéâ PROFIL UTILISATEUR COMPL√àTEMENT FINALIS√â !');
    console.log('Le syst√®me d\'authentification est maintenant 100% op√©rationnel.');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour:', error.message);
    if (error.stack) {
      console.error('Stack trace:', error.stack);
    }
  } finally {
    await mongoose.connection.close();
    console.log('üîó Connexion MongoDB ferm√©e');
  }
}

// Fonction pour v√©rifier l'√©tat final
async function verifyFinalState() {
  try {
    console.log('\nüîç V√âRIFICATION FINALE DU SYST√àME...');
    
    await mongoose.connect(MONGODB_URI);
    const db = mongoose.connection.db;
    const usersCollection = db.collection('users');
    
    const user = await usersCollection.findOne(
      { email: 'louiscyrano@gmail.com' },
      { projection: { password: 0 } }
    );
    
    // V√©rifier que tous les champs requis sont pr√©sents
    const requiredFields = {
      'name': user.name,
      'firstName': user.firstName,
      'lastName': user.lastName,
      'profile.phone': user.profile?.phone,
      'profile.department': user.profile?.department,
      'profile.position': user.profile?.position,
      'address.country': user.address?.country,
      'preferences.language': user.preferences?.language
    };
    
    console.log('\nüìä √âTAT DES CHAMPS REQUIS:');
    let allComplete = true;
    
    Object.entries(requiredFields).forEach(([field, value]) => {
      const status = value ? '‚úÖ' : '‚ùå';
      const displayValue = value || 'MANQUANT';
      console.log(`${status} ${field}: ${displayValue}`);
      if (!value) allComplete = false;
    });
    
    if (allComplete) {
      console.log('\nüéâ TOUS LES CHAMPS SONT COMPL√âT√âS !');
      console.log('‚úÖ Le syst√®me d\'authentification est compl√®tement finalis√©.');
    } else {
      console.log('\n‚ö†Ô∏è Certains champs n√©cessitent encore une attention.');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error.message);
  } finally {
    await mongoose.connection.close();
  }
}

// Ex√©cuter le script
async function main() {
  console.log('üöÄ FINALISATION DU PROFIL UTILISATEUR');
  console.log('=====================================');
  
  await completeUserProfile();
  await verifyFinalState();
  
  console.log('\nüèÅ SCRIPT TERMIN√â');
  process.exit(0);
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });
}

module.exports = { completeUserProfile, verifyFinalState };
