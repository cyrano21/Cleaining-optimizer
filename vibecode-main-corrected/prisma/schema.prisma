// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

enum UserRole {
  ADMIN
  USER
  PREMIUM_USER
}

model User {
  id       String    @id @default(cuid()) @map("_id")
  name     String?
  email    String    @unique
  image    String?
  accounts Account[]
  role     UserRole  @default(USER)
  githubToken String? // GitHub Personal Access Token for API access
  vercelToken String? // Vercel Access Token for deployment

  myPlayground StarMark[]
  
  chatMessages ChatMessage[] // Relation for chat messages
  chatSessions ChatSession[] // Relation for chat sessions

  staredPlayground Playground[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}


enum Templates{
  REACT
  NEXTJS
  EXPRESS
  VUE
  HONO
  ANGULAR
}

model Playground {
  id String @id @default(cuid()) @map("_id")
  title String
  description String?
  template  Templates  @default(REACT)
  localPath String? // Chemin local où le projet est hébergé
  templateFiles TemplateFile[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Starmark  StarMark[]
  chatSessions ChatSession[] // Relation for chat sessions linked to this project
  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model StarMark{
  id String @id @default(cuid()) @map("_id")
  userId String
  playgroundId String
  isMarked Boolean
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  playground Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)

  @@unique([userId, playgroundId])

}

model TemplateFile {
  id String @id @default(cuid()) @map("_id")
  content Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  playgroundId String @unique
  playground Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)


}


// Enhanced model for AI chat sessions
model ChatSession {
  id           String   @id @default(cuid()) @map("_id")
  userId       String
  playgroundId String?  // Optional link to playground/project
  title        String   @default("New Chat")
  description  String?
  aiProvider   String   @default("ollama") // ollama, gemini, huggingface
  aiModel      String   @default("llama3.2:latest")
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  playground   Playground?  @relation(fields: [playgroundId], references: [id], onDelete: SetNull)
  messages     ChatMessage[]

  @@index([userId])
  @@index([playgroundId])
}

// Enhanced model for AI chat messages
model ChatMessage {
  id          String      @id @default(cuid()) @map("_id")
  sessionId   String
  userId      String
  role        String      // "user" or "assistant" or "system"
  content     String
  attachments Json?       // File attachments, images, etc.
  metadata    Json?       // Additional data (streaming info, model used, etc.)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
}