// pages/api/upload/categoryImage.js
// Version simplifi√©e sans utiliser next-connect pour √©viter les probl√®mes potentiels

import multer from 'multer';
import { promisify } from 'util';

// Importer directement cloudinary
const cloudinary = require('cloudinary').v2;

// Configuration de Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
  secure: true,
});

// Configuration de multer
const storage = multer.memoryStorage();
const upload = multer({ storage });

// Cr√©er un middleware multer promisifi√©
const runMiddleware = (req, res, fn) => {
  return new Promise((resolve, reject) => {
    fn(req, res, (result) => {
      if (result instanceof Error) {
        return reject(result);
      }
      return resolve(result);
    });
  });
};

export default async function handler(req, res) {
  // Accepter uniquement les requ√™tes POST
  if (req.method !== 'POST') {
    console.log('‚ùå [API] M√©thode non autoris√©e:', req.method);
    return res.status(405).json({ success: false, message: 'M√©thode non autoris√©e' });
  }

  console.log('üîç [API] D√©but de la requ√™te d\'upload d\'image de cat√©gorie');
  console.log('üîç [API] Headers de la requ√™te:', req.headers);
  console.log('üîç [API] Variables Cloudinary:', {
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME || 'NON D√âFINIE',
    api_key: process.env.CLOUDINARY_API_KEY ? 'd√©finie (longueur: ' + process.env.CLOUDINARY_API_KEY.length + ')' : 'NON D√âFINIE',
    api_secret: process.env.CLOUDINARY_API_SECRET ? 'd√©finie (longueur: ' + process.env.CLOUDINARY_API_SECRET.length + ')' : 'NON D√âFINIE',
  });

  try {
    // Ex√©cuter le middleware multer
    await runMiddleware(req, res, upload.single('image'));

    // V√©rifier si un fichier a √©t√© envoy√©
    if (!req.file) {
      console.error('‚ùå [API] Aucun fichier envoy√©');
      return res.status(400).json({ success: false, error: 'Aucun fichier envoy√©' });
    }

    console.log('üîç [API] Fichier re√ßu:', {
      filename: req.file.originalname,
      mimetype: req.file.mimetype,
      size: req.file.size
    });

    try {
      // Convertir le buffer en base64
      const base64 = `data:${req.file.mimetype};base64,${req.file.buffer.toString('base64')}`;
      
      console.log('üîç [API] Tentative d\'upload vers Cloudinary...');
      
      // Upload vers Cloudinary
      const result = await cloudinary.uploader.upload(base64, {
        folder: 'ewebsite2-francise/categories',
        resource_type: 'auto'
      });

      console.log('‚úÖ [API] Upload r√©ussi:', {
        public_id: result.public_id,
        url: result.secure_url
      });

      // Retourner les informations n√©cessaires
      return res.status(200).json({
        success: true,
        url: result.secure_url,
        publicId: result.public_id
      });
    } catch (cloudinaryError) {
      console.error('‚ùå [API] Erreur Cloudinary:', cloudinaryError);
      return res.status(500).json({
        success: false,
        error: `Erreur Cloudinary: ${cloudinaryError.message}`
      });
    }
  } catch (err) {
    console.error('‚ùå [API] Erreur g√©n√©rale:', err);
    return res.status(500).json({
      success: false,
      error: err.message
    });
  }
}

// D√©sactiver le bodyParser par d√©faut de Next.js pour permettre √† multer de fonctionner
export const config = {
  api: {
    bodyParser: false,
  },
};
