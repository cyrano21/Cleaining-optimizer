// Script pour remplacer les URLs source.unsplash.com/random probl√©matiques
const fs = require('fs');
const path = require('path');
const { promisify } = require('util');

const readdir = promisify(fs.readdir);
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);
const stat = promisify(fs.stat);

// Extensions de fichiers √† traiter
const EXTENSIONS = ['.js', '.jsx', '.ts', '.tsx'];

// Regex pour trouver les URLs source.unsplash.com/random probl√©matiques
const SOURCE_UNSPLASH_REGEX = /https:\/\/source\.unsplash\.com\/random\/([0-9]+)x([0-9]+)\/\?([^&"']+)(?:&sig=([0-9]+))?/g;

// Remplace les URLs probl√©matiques par des images locales
function replaceSrcWithLocalImage(match, width, height, query, signature = '0') {
  const signatureNum = parseInt(signature, 10) || 0;
  const placeholderIndex = (signatureNum % 10) + 1;
  
  // Utilise un num√©ro de 1 √† 10 bas√© sur la signature pour les placeholders
  return `/images/products/placeholder-${placeholderIndex}.jpg`;
}

/**
 * Traite un fichier unique et remplace les URLs probl√©matiques
 * @param {string} filePath - Chemin du fichier √† traiter
 * @returns {Promise<boolean>} - true si des modifications ont √©t√© apport√©es
 */
async function processFile(filePath) {
  // Lire le contenu du fichier
  let content;
  try {
    content = await readFile(filePath, 'utf8');
  } catch (error) {
    console.error(`‚ùå Impossible de lire le fichier ${filePath}:`, error.message);
    return false;
  }

  // V√©rifier si le fichier contient des URLs probl√©matiques
  if (!SOURCE_UNSPLASH_REGEX.test(content)) {
    return false;
  }
  
  // R√©initialiser le regex (car .test() avance l'index)
  SOURCE_UNSPLASH_REGEX.lastIndex = 0;
  
  // Remplacer toutes les URLs probl√©matiques
  const newContent = content.replace(SOURCE_UNSPLASH_REGEX, replaceSrcWithLocalImage);
  
  // Compter combien de remplacements ont √©t√© effectu√©s
  const matches = content.match(SOURCE_UNSPLASH_REGEX) || [];
  const replaceCount = matches.length;

  // Sauvegarder le fichier si des modifications ont √©t√© apport√©es
  if (newContent !== content) {
    try {
      await writeFile(filePath, newContent, 'utf8');
      console.log(`‚úÖ ${filePath}: ${replaceCount} URLs remplac√©es`);
      return true;
    } catch (error) {
      console.error(`‚ùå Impossible d'√©crire dans le fichier ${filePath}:`, error.message);
      return false;
    }
  }
  
  return false;
}

/**
 * Parcourt r√©cursivement un r√©pertoire et traite tous les fichiers
 * @param {string} dir - R√©pertoire √† parcourir
 * @returns {Promise<number>} - Nombre total de fichiers modifi√©s
 */
async function processDirectory(dir) {
  let modifiedCount = 0;
  
  // Lister tous les fichiers et dossiers
  const items = await readdir(dir);
  
  // Traiter chaque √©l√©ment
  for (const item of items) {
    const itemPath = path.join(dir, item);
    
    // Ignorer les dossiers node_modules et .next
    if (item === 'node_modules' || item === '.next') {
      continue;
    }
    
    // V√©rifier si c'est un dossier
    const stats = await stat(itemPath);
    
    if (stats.isDirectory()) {
      // Traiter r√©cursivement le sous-dossier
      modifiedCount += await processDirectory(itemPath);
    } else if (stats.isFile() && EXTENSIONS.includes(path.extname(itemPath))) {
      // Traiter le fichier s'il a une extension support√©e
      const modified = await processFile(itemPath);
      if (modified) {
        modifiedCount++;
      }
    }
  }
  
  return modifiedCount;
}

/**
 * V√©rifie si le dossier d'images existe
 * @returns {boolean} - true si le dossier existe
 */
async function checkImagesFolder() {
  const productsDir = path.join(__dirname, 'public', 'images', 'products');
  try {
    await fs.promises.access(productsDir);
    // V√©rifie s'il y a au moins quelques images de placeholder
    const files = await fs.promises.readdir(productsDir);
    const placeholderFiles = files.filter(file => file.startsWith('placeholder-'));
    
    if (placeholderFiles.length >= 5) {
      console.log('‚úÖ Dossier d\'images d√©tect√© avec des placeholders');
      return true;
    } else {
      console.log('‚ö†Ô∏è Le dossier d\'images existe mais ne contient pas assez de placeholders');
      return false;
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Le dossier d\'images n\'existe pas ou n\'est pas accessible');
    return false;
  }
}

/**
 * Fonction principale
 */
async function main() {
  console.log('üîç Recherche et remplacement des URLs source.unsplash.com/random probl√©matiques...');
  
  // V√©rifie si le dossier d'images existe
  const imagesExist = await checkImagesFolder();
  if (!imagesExist) {
    console.log('\n‚ö†Ô∏è Les images de placeholder n\'ont pas √©t√© trouv√©es.');
    console.log('üîÑ Veuillez d\'abord ex√©cuter le script "download-product-images.js" pour t√©l√©charger les images n√©cessaires.');
    console.log('   Commande: node download-product-images.js');
    process.exit(1);
  }
  
  // Chemin racine du projet
  const rootDir = path.resolve(__dirname);
  
  try {
    // Traiter tous les fichiers du projet
    console.log('üîé Analyse des fichiers du projet...');
    const modifiedCount = await processDirectory(rootDir);
    
    console.log('\nüìä R√©sum√© des modifications:');
    console.log(`‚úÖ ${modifiedCount} fichiers modifi√©s`);
    
    if (modifiedCount > 0) {
      console.log('\nüéâ Toutes les URLs probl√©matiques ont √©t√© remplac√©es avec succ√®s!');
      console.log('üí° Red√©marrez votre serveur Next.js pour voir les changements avec la commande:');
      console.log('   npm run dev');
    } else {
      console.log('\nüí° Aucun fichier n\'a √©t√© modifi√©. Soit toutes les URLs ont d√©j√† √©t√© corrig√©es, soit aucune URL probl√©matique n\'a √©t√© trouv√©e.');
    }
  } catch (error) {
    console.error('‚ùå Une erreur est survenue lors du traitement des fichiers:', error);
    process.exit(1);
  }
}

// Ex√©cuter la fonction principale
main().catch(console.error);
