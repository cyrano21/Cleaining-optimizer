#!/bin/bash

# Script d'automatisation compl√®te du seed MongoDB pour Ecomus SaaS
# Ce script guide l'utilisateur √† travers tout le processus

set -e  # Arr√™ter en cas d'erreur

echo "üöÄ Installation et Seed automatique - Ecomus SaaS"
echo "================================================="
echo ""

# Fonction pour v√©rifier si une commande existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fonction pour attendre une confirmation
confirm() {
    read -p "$1 (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        return 1
    fi
}

# V√©rifier Node.js
if ! command_exists node; then
    echo "‚ùå Node.js n'est pas install√©. Veuillez l'installer d'abord."
    exit 1
fi

echo "‚úÖ Node.js version: $(node --version)"

# V√©rifier npm
if ! command_exists npm; then
    echo "‚ùå npm n'est pas install√©."
    exit 1
fi

echo "‚úÖ npm version: $(npm --version)"

# Installation des d√©pendances
echo ""
echo "üì¶ Installation des d√©pendances..."
npm install

# V√©rifier .env.local
if [ ! -f ".env.local" ]; then
    echo ""
    echo "‚ö†Ô∏è  Fichier .env.local non trouv√©"
    if confirm "Cr√©er un fichier .env.local avec des valeurs par d√©faut?"; then
        cp .env.example .env.local
        echo "‚úÖ .env.local cr√©√©"
        echo "‚ö†Ô∏è  Pensez √† configurer vos vraies valeurs MongoDB et Cloudinary"
    else
        echo "‚ùå .env.local requis pour continuer"
        exit 1
    fi
fi

# Choix de la base de donn√©es
echo ""
echo "üóÑÔ∏è  Configuration de la base de donn√©es:"
echo "1. MongoDB avec Docker (recommand√© pour d√©veloppement)"
echo "2. MongoDB Atlas (recommand√© pour production)"
echo "3. MongoDB local existant"
echo "4. D√©monstration sans base de donn√©es"

read -p "Votre choix (1-4): " -n 1 -r choice
echo ""

case $choice in
    1)
        echo "üê≥ Configuration MongoDB avec Docker..."
        
        # V√©rifier Docker
        if ! command_exists docker; then
            echo "‚ùå Docker n'est pas install√©. Veuillez l'installer d'abord."
            exit 1
        fi
        
        # Arr√™ter le container existant s'il existe
        if docker ps -a | grep -q ecomus-mongodb; then
            echo "üõë Arr√™t du container MongoDB existant..."
            docker stop ecomus-mongodb 2>/dev/null || true
            docker rm ecomus-mongodb 2>/dev/null || true
        fi
        
        # D√©marrer MongoDB
        echo "üöÄ D√©marrage de MongoDB..."
        npm run mongodb:start
        
        # Attendre que MongoDB soit pr√™t
        echo "‚è≥ Attente du d√©marrage de MongoDB..."
        sleep 15
        
        # Mettre √† jour .env.local
        if grep -q "MONGODB_URI=mongodb://localhost:27017" .env.local; then
            sed -i 's|MONGODB_URI=mongodb://localhost:27017.*|MONGODB_URI=mongodb://admin:password@localhost:27017/ecomus_saas_dev?authSource=admin|' .env.local
        else
            echo "MONGODB_URI=mongodb://admin:password@localhost:27017/ecomus_saas_dev?authSource=admin" >> .env.local
        fi
        
        echo "‚úÖ MongoDB configur√© avec Docker"
        RUN_SEED=true
        ;;
        
    2)
        echo "‚òÅÔ∏è  Configuration MongoDB Atlas..."
        echo "Veuillez configurer manuellement MONGODB_URI dans .env.local"
        echo "Format: mongodb+srv://username:password@cluster.mongodb.net/database?retryWrites=true&w=majority"
        
        if confirm "Avez-vous configur√© MONGODB_URI dans .env.local?"; then
            RUN_SEED=true
        else
            echo "‚ö†Ô∏è  Configurez MONGODB_URI puis relancez le script"
            exit 0
        fi
        ;;
        
    3)
        echo "üè† Utilisation de MongoDB local..."
        echo "‚ö†Ô∏è  Assurez-vous que MongoDB fonctionne sur localhost:27017"
        
        if confirm "MongoDB local est-il d√©marr√©?"; then
            RUN_SEED=true
        else
            echo "‚ö†Ô∏è  D√©marrez MongoDB puis relancez le script"
            exit 0
        fi
        ;;
        
    4)
        echo "üé≠ Mode d√©monstration..."
        echo ""
        npm run seed:demo
        echo ""
        echo "üéâ D√©monstration termin√©e!"
        echo "Pour un seed r√©el, relancez avec l'option 1, 2 ou 3"
        exit 0
        ;;
        
    *)
        echo "‚ùå Choix invalide"
        exit 1
        ;;
esac

# Lancer le seed si configur√©
if [ "$RUN_SEED" = true ]; then
    echo ""
    echo "üå± Lancement du seed MongoDB..."
    echo "‚ö†Ô∏è  Cela va supprimer toutes les donn√©es existantes!"
    
    if confirm "Continuer avec le seed?"; then
        npm run seed
        
        echo ""
        echo "üîç V√©rification de l'int√©grit√© des donn√©es..."
        npm run seed:verify
        
        echo ""
        echo "üéâ Installation et seed termin√©s avec succ√®s!"
        echo ""
        echo "üîë Comptes de test cr√©√©s:"
        echo "   Admin: admin@ecomus.com / admin123"
        echo "   Vendor: vendor1@ecomus.com / vendor123"
        echo "   Client: client@ecomus.com / client123"
        echo ""
        echo "üöÄ Votre plateforme Ecomus SaaS est pr√™te!"
        echo ""
        echo "üìã Prochaines √©tapes:"
        echo "   1. D√©marrer le serveur: npm run dev"
        echo "   2. Ouvrir http://localhost:3000"
        echo "   3. Se connecter avec un compte de test"
        echo "   4. Acc√©der au dashboard: http://localhost:3000/dashboard"
    else
        echo "‚ùå Seed annul√©"
        exit 0
    fi
fi

echo ""
echo "üéØ Installation termin√©e!"
